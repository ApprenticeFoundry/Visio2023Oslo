using System;
using System.Collections;
using System.Xml;
using Visio = Microsoft.Office.Interop.Visio;

namespace ApprenticeNET
{
    /// <summary>
    /// Bass class for all classes in ShapeBuilderObject
    /// </summary>
    public class ShapeBuilder : SemanticObject
	{
		protected static VisioIntegration VisioIntegration = null;

		protected static string ASIGUID = "ASIGUID";
		protected static string ASIGUIDQuery = "ASIGUID.Prompt";
		protected static string ASIShowFlag = "ASIShowFlag";
		protected static string ASIFlagType = "ASIShowFlag.Prompt";
		protected static string ASIShowNote = "ASIShowNote";
		protected static string ASINoteType = "ASIShowNote.Prompt";
		protected static string ASIKnowledge = "ASIKnowledge";
		protected static string ASIPublished = "ASIPublished";
		protected static string ASIVersion = "ASIKnowledge.Prompt";
		protected static string ASIKnowledgeStyle = "ASIKnowledgeStyle";
		protected static string ASIKnowledgeDefault = "ASIKnowledgeStyle.Prompt";
		protected static string ASISearchSubShapes = "ASISearchSubShapes";
		//protected static string ASIOnDrop = "ASIOnDrop";
		protected static string ASIIgnore = "ASIIgnore";
		protected static string ASIDirty = "ASIIgnore.Prompt";
		protected static string ASIChildXml = "ASIChildXml";
		protected static string ASIRecordXml = "ASIRecordXml";
		protected static string ASIHyperLink = "ASIHyperLink";
		protected static string ASIHideDetails = "ASIHyperLink.Prompt";
		protected static string ASIPresentation = "ASIPresentation";

		protected static string ASITrackCollision = "ASITrackCollision";
		protected static string ASITrackDimension = "ASITrackDimension";

		protected static string ASIDateStamp = "ASIDateStamp";
		protected static string ASIApprenticeID = "ApprenticeID";
		protected static string ASIName = "ASIName";
		protected static string ASIMaster = "ASIMaster";
		protected static string ASIStencil = "ASIMaster.Prompt";
		protected static string ASIConcept = "ASIConcept";
		protected static string ASIType = "ASIType";
		protected static string ASIRelationship = "ASIRelationship";
		protected static string ASIRole = "ASIRole";
		protected static string ASISource = "ASISource";

		public ShapeBuilder() : base()
		{
		}
		public ShapeBuilder(string sName) : base(sName)
		{
		}
		public ShapeBuilder(VisioIntegration oVisio) :base()
		{
			VisioIntegration = oVisio;
		} 	
		public static void PublishASIMaster(Visio.Shape ovShape, VisioMaster oaMaster, VisioStencil oaStencil, bool bSearchSubShapes)
		{
			EstablishUserCellValue(ovShape,ASIDateStamp,System.DateTime.Now.ToString(),true);
			EstablishUserCellValue(ovShape,ASIMaster,oaMaster.Name,true);
			if ( bSearchSubShapes )
				EstablishUserCellValue(ovShape,ASISearchSubShapes,bSearchSubShapes,true);
			
			if ( oaStencil != null )
				EstablishUserCellValue(ovShape,ASIStencil,oaStencil.Name,true);

			if ( oaMaster.TargetName != "" ) 
				EstablishUserCellValue(ovShape,ASIName,oaMaster.TargetName,true);

			if ( oaMaster.TargetConcept != null ) 
				EstablishUserCellValue(ovShape,ASIConcept,oaMaster.TargetConcept.Name,true);

			if ( oaMaster.TargetRelationship != null) 
				EstablishUserCellValue(ovShape,ASIRelationship,oaMaster.TargetRelationship.Name,true);

			if ( oaMaster.TargetRole != null ) 
				EstablishUserCellValue(ovShape,ASIRole,oaMaster.TargetRole.Name,true);

			PublishASIParameterPackage(ovShape,oaMaster.Knowledge(typeof(ParameterPackage)));
		}
/*
VisCellIndices	Logical indices of cells in rows of shape or style objects.
#define visCellInval                              255       // An index no cell will ever have.
#define visCellFirst                              0         // Cell logically at or before every other cell in a row.
#define visCellNone                               255       // Connotes unspecified cell.
#define visXFormPinX                              0         // visSectionObject,visRowXFormOut|visRowTextXForm,visXFormPinX  name:PinX|TxtPinX

 */

		public static void PublishASISingleBehavior(Visio.Shape ovShape, string sBehavior, string sText)
		{
			try
			{
				switch ( sBehavior.ToLower() )
				{
					case "antiscale":
						EstablishUserCellFormula(ovShape,"AntiScale","ThePage!PageScale/ThePage!DrawingScale",true);
						SetCellFormula(ovShape,"Width",string.Format("Guard(User.AntiScale*{0}",ovShape.get_Cells("Width").ResultIU) ,true);
						SetCellFormula(ovShape,"Height",string.Format("Guard(User.AntiScale*{0}",ovShape.get_Cells("Height").ResultIU) ,true);
						break;
					case "subshapes":
					case "searchsubshapes":
					case "searchable":
						EstablishUserCellValue(ovShape,ASISearchSubShapes,true,true);
						break;
					case "group":
						SetCellFormula(ovShape,"SelectMode","=0",true);
						SetCellFormula(ovShape,"IsSnapTarget","=False",true);
						break;
					case "droptarget":
					case "droppable":
						SetCellFormula(ovShape,"IsDropTarget","=True",true);
						break;
					case "dropsource":
						SetCellFormula(ovShape,"IsDropSource","=True",true);
						break;
					case "sendtoback":
						SetCellFormula(ovShape,"EventDrop","=DoCMD(1048)",true);
						//EstablishUserCellValue(ovShape,ASIOnDrop,"Back",true);
						break;
					case "bringtofront":
						SetCellFormula(ovShape,"EventDrop","=DoCMD(1046)",true);
						//EstablishUserCellValue(ovShape,ASIOnDrop,"Front",true);
						break;
					case "clearlayers":
						ShapeBuilder.AddShapeLayers(ovShape,"",true);
						break;
					case "optimize":
						double dFill = ShapeBuilder.RetrieveCellValue(ovShape,"FillPattern");
						if ( dFill >= 25 && dFill <= 40 ) // remove gradient fills
							ShapeBuilder.SetCellFormula(ovShape,"FillPattern","=1",true);

						foreach(Visio.Shape ovSubShape in ovShape.Shapes)
							PublishASISingleBehavior(ovSubShape,"optimize",null);

						break;
					case "protecttext":
						ShapeBuilder.EstablishUserCellValue(ovShape,"ASIProtectText","=true",true);
						//ShapeBuilder.SetCellFormula(ovShape,"LockTextEdit","=1",true);
						break;
					case "scalinglinewidth":
						EstablishUserCellFormula(ovShape,"AntiScale","ThePage!PageScale/ThePage!DrawingScale",true);
						EstablishUserCellValue(ovShape,"Width","24",true);
						SetCellFormula(ovShape,"LineWeight","=guard(72 pt*User.Width*User.AntiScale)",true);
						break;
					case "scalingtext":
						EstablishUserCellFormula(ovShape,"AntiScale","ThePage!PageScale/ThePage!DrawingScale",true);
						double dSize = RetrieveCellValue(ovShape,"Char.Size");
						EstablishUserCellValue(ovShape,"TextSize",string.Format("{0} pt", dSize),true);
						SetCellFormula(ovShape,"Char.Size","=guard(User.TextSize*User.AntiScale",true);
						break;
					case "lock":
						SetCellFormula(ovShape,"LockWidth","=1",true);
						SetCellFormula(ovShape,"LockHeight","=1",true);
						SetCellFormula(ovShape,"LockMoveX","=1",true);
						SetCellFormula(ovShape,"LockMoveY","=1",true);
						SetCellFormula(ovShape,"LockRotate","=1",true);
						SetCellFormula(ovShape,"LockDelete","=1",true);
						SetCellFormula(ovShape,"LockEditText","=1",true);
						break;
					case "begin":
						SetCellFormula(ovShape,"SelectMode","=0",true);
						EstablishUserCellFormula(ovShape,"LocBeginX","=PNTX(LOCTOLOC(PNT(BeginX,BeginY),ThePage!PageWidth,Width))",true);
						EstablishUserCellFormula(ovShape,"LocBeginY","=PNTY(LOCTOLOC(PNT(BeginX,BeginY),ThePage!PageWidth,Width))",true);
						break;
					case "end":
						SetCellFormula(ovShape,"SelectMode","=0",true);
						EstablishUserCellFormula(ovShape,"LocEndX","=PNTX(LOCTOLOC(PNT(EndX,EndY),ThePage!PageWidth,Width))",true);
						EstablishUserCellFormula(ovShape,"LocEndY","=PNTY(LOCTOLOC(PNT(EndX,EndY),ThePage!PageWidth,Width))",true);
						break;
					case "centerpoint":
						if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionConnectionPts, (short)visTF.TRUE) == (short)visTF.FALSE)
						{
							EstablishConnectionPointCellFormula(ovShape,"Center","",true);
							EstablishConnectionPointCellFormula(ovShape,"Center.X","=Width/2",true);
							EstablishConnectionPointCellFormula(ovShape,"Center.Y","=Height/2",true);
						}
						break;
					case "edgepoint":
						if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionConnectionPts, (short)visTF.TRUE) == (short)visTF.FALSE)
						{
							EstablishConnectionPointCellFormula(ovShape,"Left","",true);
							EstablishConnectionPointCellFormula(ovShape,"Left.X","=0",true);
							EstablishConnectionPointCellFormula(ovShape,"Left.Y","=Height/2",true);
							EstablishConnectionPointCellFormula(ovShape,"Top","",true);
							EstablishConnectionPointCellFormula(ovShape,"Top.X","=Width/2",true);
							EstablishConnectionPointCellFormula(ovShape,"Top.Y","=Height",true);
							EstablishConnectionPointCellFormula(ovShape,"Right","",true);
							EstablishConnectionPointCellFormula(ovShape,"Right.X","=Width",true);
							EstablishConnectionPointCellFormula(ovShape,"Right.Y","=Height/2",true);
							EstablishConnectionPointCellFormula(ovShape,"Bottom","",true);
							EstablishConnectionPointCellFormula(ovShape,"Bottom.X","=Width/2",true);
							EstablishConnectionPointCellFormula(ovShape,"Bottom.Y","=0",true);
						}
						break;
					case "splittable":
						SetCellFormula(ovShape,"ShapeSplittable","=1",true);
						break;
					case "splitter":
						SetCellFormula(ovShape,"ShapeSplit","=1",true);
						break;
					case "split":
						if ( ovShape.OneD == (short)visTF.TRUE )
							SetCellFormula(ovShape,"ShapeSplittable","=1",true);
						else
							SetCellFormula(ovShape,"ShapeSplit","=1",true);
						break;
					case "clearcontrolpoint":
						if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionControls, (short)visTF.TRUE) == (short)visTF.TRUE)
							ovShape.DeleteSection((short)Visio.VisSectionIndices.visSectionControls);
						break;
					case "moveabletextonly":
						if ( ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionControls, (short)visTF.TRUE) == (short)visTF.TRUE)
							ovShape.DeleteSection((short)Visio.VisSectionIndices.visSectionControls);

						PublishASISingleBehavior(ovShape,"moveabletext",sText);
						break;
					case "moveabletext":
						//I hope this created a text transform section	
						if ( sText != null )
							ovShape.Text = sText;

						SetCellFormula(ovShape,"TextBkgnd","=2",true);
						SetXFormCellFormula(ovShape,(short)Visio.VisCellIndices.visXFormWidth,"=TEXTWIDTH(TheText)");
						SetXFormCellFormula(ovShape,(short)Visio.VisCellIndices.visXFormHeight,"=TEXTHEIGHT(TheText,TxtWidth)");
						SetXFormCellFormula(ovShape,(short)Visio.VisCellIndices.visXFormAngle,"=IF(BITXOR(FlipX,FlipY),Angle,-Angle)");
						SetXFormCellFormula(ovShape,(short)Visio.VisCellIndices.visXFormLocPinX,"=TxtWidth*0.5");
						SetXFormCellFormula(ovShape,(short)Visio.VisCellIndices.visXFormLocPinY,"=TxtHeight");

						bool bAddControl = true;
						try
						{
							Visio.Cell ovCell = ovShape.get_CellsSRC((short)Visio.VisSectionIndices.visSectionObject,(short)Visio.VisRowIndices.visRowTextXForm,(short)(short)Visio.VisCellIndices.visXFormPinY);
							string sFormula = ovCell.Formula;
							if ( sFormula.IndexOf("ontrols.") > 0 )
							{
								bAddControl = false;
								ovCell = ovShape.get_Cells(sFormula);
								ovCell.Formula = "0.0";
							}
						}
						catch{};

						if ( bAddControl )
						{
							EstablishControlsCellFormula(ovShape,"Text","",true);
							EstablishControlsCellFormula(ovShape,"Text.X","=Width/2",true);
							//EstablishControlsCellFormula(ovShape,"Text.Y","=Height/2",true);
							EstablishControlsCellFormula(ovShape,"Text.Y","=-.2",true);
							EstablishControlsCellFormula(ovShape,"Text.Prompt","=" + WrapDQ("Reposition Text"),true);

							//attach to controls and make it moveable
							SetXFormCellFormula(ovShape,(short)Visio.VisCellIndices.visXFormPinX,"=Controls.Text.X");
							SetXFormCellFormula(ovShape,(short)Visio.VisCellIndices.visXFormPinY,"=Controls.Text.Y");
						}
						break;
				}
			}
			catch {}

		}

		public static void PublishASIBehaviors(Visio.Shape ovShape, string sBehaviors, string sText)
		{
			if ( sBehaviors.Length == 0 )
				return;

			foreach(string sBehavior in sBehaviors.Split(';'))
				PublishASISingleBehavior(ovShape,TrimString(sBehavior),sText);
		}
		public static void PublishASIStencil(Visio.Shape ovShape, string sMaster, string sConcept, string sType, VisioStencil oaStencil, bool bSearchSubShapes)
		{
			EstablishUserCellValue(ovShape,ASIDateStamp,System.DateTime.Now.ToString(),true);
			EstablishUserCellValue(ovShape,ASIMaster,sMaster,true);
			if ( bSearchSubShapes )
				EstablishUserCellValue(ovShape,ASISearchSubShapes,bSearchSubShapes,true);

			if ( oaStencil != null )
				EstablishUserCellValue(ovShape,ASIStencil,oaStencil.Name,true);

			if ( sConcept.Length > 0 )
				EstablishUserCellValue(ovShape,ASIConcept,sConcept,true);
			else
				EstablishUserCellValue(ovShape,ASIConcept,sMaster,true);

			EstablishUserCellValue(ovShape,ASIType,sType,true);

			PublishASIParameterPackage(ovShape,oaStencil.Knowledge(typeof(ParameterPackage)));
		}

		public static void PublishASIAnnotation(Visio.Shape ovShape, VisioStencil oaStencil)
		{
			RemoveUserCell(ovShape,ASIDateStamp);
			RemoveUserCell(ovShape,ASIMaster);
			RemoveUserCell(ovShape,ASIStencil);
			RemoveUserCell(ovShape,ASIConcept);
			RemoveUserCell(ovShape,ASIType);

			PublishASIParameterPackage(ovShape,oaStencil.Knowledge(typeof(ParameterPackage)));
		}

		public static void PublishASIParameterPackage(Visio.Shape ovShape, ObjectCollection oPackages)
		{
			foreach(ParameterPackage oPackage in oPackages)
			{
				string sName = oPackage.Name.ToUpper();
				if ( sName == "LAYER" )
				{
					string sValue = oPackage.Formula;
					if ( sValue.StartsWith(((char)'"').ToString()) )
						ShapeBuilder.AddShapeLayers(ovShape,UnwrapDQ(sValue),false);

					continue;
				}
				if ( !sName.StartsWith("USER.") )
					continue;

				sName = sName.Replace("USER.","");
				string sFormula = oPackage.Formula.ToUpper();
				if ( !sFormula.StartsWith("VISIO") )
					sFormula = "=";
						
				EstablishUserCellFormula(ovShape,sName,sFormula,true);
			}
		}
		public static void ClearMenusAndActions(Visio.Shape ovShape, bool bDeep)
		{
			ovShape.DeleteSection((short)Visio.VisSectionIndices.visSectionAction);
			ovShape.DeleteSection((short)Visio.VisSectionIndices.visSectionSmartTag);
			if ( GetASIMaster(ovShape).Length == 0 )
				return;

			foreach(Visio.Shape ovSubShape in ovShape.Shapes)
				ClearMenusAndActions(ovSubShape,true);
		}

		public static bool UpdateShapeMaster(Visio.Master ovMaster)
		{
			foreach(Visio.Shape ovShape in ovMaster.Shapes)
				UpdateShapeMaster(ovShape);

			return true;
		}

		public static bool UpdateShapeMaster(Visio.Shape ovShape)
		{
			string sKnow = GetASIKnowledge(ovShape);
			if ( sKnow.Length == 0 )
				return true;

//			string sVersion = GetASIVersion(ovShape);
//			double dVersion = sVersion.Length == 0 ? 0 : double.Parse(sVersion);

			switch ( sKnow )
			{
				case "TaskMenu":
					ReplaceCellFormula(ovShape,"Rounding","=0",false);
					ReplaceCellFormula(ovShape,"FillForegnd","=RGB(193,193,217)",false);
					ReplaceCellFormula(ovShape,"SelectMode","=2",false);
					ReplaceCellFormula(ovShape,"EventDblClick","=OPENTEXTWIN()",true);
					break;
				case "Menu":
				case "MenuItem":
				case "Command":
					ReplaceCellFormula(ovShape,"SelectMode","=2",false);
					ReplaceCellFormula(ovShape,"EventDblClick","=OPENTEXTWIN()",true);
					break;
				case "Attribute":
					ReplaceCellFormula(ovShape,"SelectMode","=2",false);
					break;
				case "Stencil":
					ReplaceCellFormula(ovShape,"IsDropSource","=1",false);
					ReplaceCellFormula(ovShape,"SelectMode","=2",false);
					break;
				case "Master":
					ReplaceCellFormula(ovShape,"IsDropSource","=1",false);
					break;
				case "Formula":
				case "ValidValue":
					ReplaceCellFormula(ovShape,"Char.Color","=0",false);
					ReplaceCellFormula(ovShape,"Char.Font","=4",false);
					ReplaceCellFormula(ovShape,"Char.Size","=8 pt.",false);
					ReplaceCellFormula(ovShape,"Para.HorzAlign","=0",false);
					break;
			}

			foreach(Visio.Shape ovSubShape in ovShape.Shapes)
				UpdateShapeMaster(ovSubShape);

			return true;
		}
		public static void GuardCellFormula(Visio.Shape ovShape, string sCell, bool bDeep, bool bChildrenOnly)
		{
			if ( !bChildrenOnly )
				try
				{
					Visio.Cell ovCell = ovShape.get_Cells(sCell);
					string sFormula = ovCell.Formula;
					if ( sFormula.ToLower().IndexOf("guard(") == -1 )
						ovCell.Formula = string.Format("=guard({0})", sFormula );
				}
				catch{}

			if ( bDeep )
				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					GuardCellFormula(ovSubShape,sCell,bDeep,false);
		}
		public static void UnguardCellFormula(Visio.Shape ovShape, string sCell, bool bDeep, bool bChildrenOnly)
		{
			if ( !bChildrenOnly )
				try
				{
					Visio.Cell ovCell = ovShape.get_Cells(sCell);
					string sFormula = ovCell.Formula.ToLower();
					if ( sFormula.IndexOf("guard(") != -1 )
					{
						sFormula = sFormula.Remove(sFormula.Length-1,1);
						sFormula = sFormula.Replace("guard(","");
						ovCell.Formula = sFormula;
					}
				}
				catch{}

			if ( bDeep )
				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					UnguardCellFormula(ovSubShape,sCell,bDeep,false);
		}
		public static bool LocateShapeOnPage(Visio.Shape ovSourceShape, ref double dX, ref double dY)
		{
			double dXPage = 0;
			double dYPage = 0;

			double dLocX = ovSourceShape.get_Cells("PinX").ResultIU;
			double dLocY = ovSourceShape.get_Cells("PinY").ResultIU;

			Visio.Shape ovParent = ovSourceShape.Parent as Visio.Shape;

			if ( ovParent.ObjectType == (short)Visio.VisObjectTypes.visObjTypeShape )
			{
				while ( ovParent.ObjectType == (short)Visio.VisObjectTypes.visObjTypeShape )
				{
					Visio.Shape ovGrandParent = ovParent.Parent as Visio.Shape;

					if ( ovGrandParent.ObjectType == (short)Visio.VisObjectTypes.visObjTypeShape )
						ovParent.TransformXYFrom(ovGrandParent, dLocX, dLocY, out dXPage, out dYPage);
					else
						ovParent.XYToPage(dLocX, dLocY, out dXPage, out dYPage);

					ovParent = ovGrandParent;
					dLocX = dXPage;
					dLocY = dYPage;
				}
			}
			else
			{
				 dXPage = dLocX;
				 dYPage = dLocY;
			}

			dX = dXPage;
			dY = dYPage;
			return true;
		}

		public static bool LocateShapeOnShape(Visio.Shape ovSourceShape, Visio.Shape ovTargetShape, ref double dX, ref double dY)
		{
			double dXPage = 0;
			double dYPage = 0;

			double dLocX = ovSourceShape.get_Cells("PinX").ResultIU;
			double dLocY = ovSourceShape.get_Cells("PinY").ResultIU;

			Visio.Shape ovParent = ovSourceShape.Parent as Visio.Shape;

			if ( ovParent.ObjectType == (short)Visio.VisObjectTypes.visObjTypeShape )
			{
				while ( ovParent.ObjectType == (short)Visio.VisObjectTypes.visObjTypeShape )
				{
					Visio.Shape ovGrandParent = ovParent.Parent as Visio.Shape;

					if ( ovGrandParent.ObjectType == (short)Visio.VisObjectTypes.visObjTypeShape )
						ovParent.TransformXYFrom(ovGrandParent, dLocX, dLocY, out dXPage, out dYPage);
					else
						ovParent.XYToPage(dLocX, dLocY, out dXPage, out dYPage);

					ovParent = ovGrandParent;
					dLocX = dXPage;
					dLocY = dYPage;
				}
			}
			else
			{
				dXPage = dLocX;
				dYPage = dLocY;
			}

			//Now the pinXY for source shape is translated to page
			//Time for translate it to target shape
			ovTargetShape.XYFromPage( dXPage, dYPage, out dX, out dY );
			return true;
		}
		public static bool DoShapesTouch(Visio.Shape ovShape1, Visio.Shape ovShape2, double dDistance)
		{
			double dX1 = 0;
			double dY1 = 0;
			double dX2 = 0;
			double dY2 = 0;

			LocateShapeOnPage(ovShape1, ref dX1, ref dY1);
			LocateShapeOnPage(ovShape2, ref dX2, ref dY2);
			
			double dX = dX2 - dX1;
			double dY = dY2 - dY1;
			return ( Math.Sqrt(dX*dX + dY*dY) < dDistance );
		}

		public static bool DoShapesCollide(Visio.Shape ovSourceShape, Visio.Shape ovTargetShape)
		{
			short iFlag = (short)(Visio.VisSpatialRelationCodes.visSpatialContainedIn | Visio.VisSpatialRelationCodes.visSpatialTouching);
			short iResult = ovSourceShape.get_SpatialRelation(ovTargetShape,0.0,iFlag);
			return (iResult == (short)visTF.TRUE);
		}
		public static double DistanceFromShape(Visio.Shape ovSourceShape, Visio.Shape ovTargetShape)
		{
			short iFlag = (short)(Visio.VisSpatialRelationFlags.visSpatialBackToFront);
			return ovSourceShape.get_DistanceFrom(ovTargetShape,iFlag);
		}
		public static bool IsShapeIgnored(Visio.Shape ovShape)
		{
			return RetrieveUserCellValueBool(ovShape,ASIIgnore);
		}
		public static void SetShapeIgnored(Visio.Shape ovShape, bool bIgnored)
		{
			if ( DoesUserCellExist(ovShape,ASIIgnore) == false )
				EstablishUserCellValue(ovShape,ASIIgnore,bIgnored,true);

			EstablishUserCellValue(ovShape,ASIIgnore,bIgnored,true);
			foreach(Visio.Shape ovSubShape in ovShape.Shapes)
				SetShapeIgnored(ovSubShape,bIgnored);
		}
//		public static bool TrackMovement(Visio.Shape ovShape, string sCMD, bool bClear)
//		{
//			string sEvent = string.Format("{0};{1}",sCMD,EstablishGUIDforShape(ovShape));
//			EstablishUserCellValue(ovShape,"Track",sEvent,true);
//			string sFormula = bClear ? "=" : "=QUEUEMARKEREVENT(1)";
//
//			return SetCellFormula(ovShape,"EventXFMod",sFormula,true);
//		}
		public static bool DeleteShape(Visio.Shape ovShape, bool bEventsOn)
		{
			Visio.Application oApp = ovShape.Application;

			short iEvents = oApp.EventsEnabled;

			bool bResult = false;
			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			try 
			{
				//TrackDoubleClick(ovShape,"",true);
				//ovShape.get_UniqueID((short)Visio.VisUniqueIDArgs.visDeleteGUID);
				ovShape.Delete();  //forced only if because user delete key will do this
				bResult = true;
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return bResult;
		}
		public static bool UnglueShape(Visio.Shape ovShape)
		{
			try 
			{
				foreach(Visio.Connect ovConnect in ovShape.FromConnects)
					ovConnect.FromCell.FormulaForce = string.Format("={0}",ovConnect.FromCell.ResultIU);

				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					UnglueShape(ovSubShape);
			} 
			catch {}

			return true;
		}
		public static bool UnglueSelection(Visio.Application oApp, bool bEventsOn)
		{
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			try 
			{
				foreach(Visio.Shape ovShape in oApp.ActiveWindow.Selection)
					UnglueShape(ovShape);
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return true;
		}
		public static bool DeleteSelection(Visio.Application oApp, bool bEventsOn)
		{
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;
			try 
			{
				oApp.ActiveWindow.Selection.Delete();
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return true;
		}
		public static bool DeleteSelection(Visio.Selection ovSelection, bool bEventsOn)
		{
			Visio.Application oApp = ovSelection.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;
			try 
			{
				ovSelection.Delete();
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return true;
		}
		public static Visio.Shape DuplicateShape(Visio.Shape ovShape, bool bEventsOn)
		{
			if ( ovShape == null )
				return null;

			Visio.Application oApp = ovShape.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			Visio.Shape ovTargetShape = null;
			try 
			{
				ovTargetShape = ovShape.Duplicate();
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return ovTargetShape;
		}
		public static Visio.Shape DropMaster(Visio.Shape ovShape, Visio.Master ovMaster, double dPinX, double dPinY, bool bEventsOn)
		{
			if ( ovShape == null || ovMaster == null )
				return null;

			Visio.Application oApp = ovShape.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			Visio.Shape ovTargetShape = null;
			try 
			{
				ovTargetShape = ovShape.Drop(ovMaster,dPinX,dPinY);
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return ovTargetShape;
		}
		public static Visio.Shape DropMaster(Visio.Page ovPage, Visio.Master ovMaster, double dPinX, double dPinY, bool bEventsOn)
		{
			if ( ovPage == null || ovMaster == null )
				return null;

			Visio.Application oApp = ovPage.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			Visio.Shape ovTargetShape = null;
			try 
			{
				ovTargetShape = ovPage.Drop(ovMaster,dPinX,dPinY);
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return ovTargetShape;
		}
		public static Visio.Shape DropShape(Visio.Page ovPage, Visio.Shape ovShape, double dPinX, double dPinY, bool bEventsOn)
		{
			if ( ovPage == null || ovShape == null )
				return null;

			Visio.Application oApp = ovPage.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			Visio.Shape ovTargetShape = null;
			try 
			{
				ovTargetShape = ovPage.Drop(ovShape,dPinX,dPinY);
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return ovTargetShape;
		}
		public static Visio.Shape DropShape(Visio.Page ovPage, Visio.Shape ovShape, bool bEventsOn)
		{
			if ( ovPage == null || ovShape == null )
				return null;

			Visio.Application oApp = ovPage.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			Visio.Shape ovTargetShape = null;
			try 
			{
				double dPinX = ovShape.get_Cells("PinX").ResultIU + .75;
				double dPinY = ovShape.get_Cells("PinY").ResultIU - .75;
				ovTargetShape = ovPage.Drop(ovShape,dPinX,dPinY);
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return ovTargetShape;
		}
		public static bool DuplicateSelection(Visio.Application oApp, bool bEventsOn)
		{
			short iEvents = oApp.EventsEnabled;
			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			try 
			{
				oApp.ActiveWindow.Selection.Duplicate();
			} 
			catch {}

			oApp.EventsEnabled = iEvents;
			return true;
		}
		public static bool TrackDoubleClick(Visio.Shape ovShape, string sCMD, bool bClear)
		{
			string sEvent = string.Format("{0};{1}",sCMD,EstablishGUIDforShape(ovShape));
			string sMarkerEvent = string.Format("=QUEUEMARKEREVENT({0})", WrapDQ(sEvent));
			string sFormula = bClear ? "=" : sMarkerEvent;

			return SetCellFormula(ovShape,"EventDblClick",sFormula,true);
		}
		public static bool IsShapeDirty(Visio.Shape ovShape)
		{
			if ( ovShape == null )
				return true;

			return RetrieveUserCellValueBool(ovShape,ASIDirty);
		}
		public static void SetParentShapesDirty(Visio.Shape ovShape, bool bDirty)
		{
			Visio.Shape ovParent = ovShape.ContainingShape;
			if ( ovParent == null || ovParent == ovShape.ContainingPage.PageSheet )
				return;

			SetShapeDirty(ovParent,bDirty);
			SetParentShapesDirty(ovParent,bDirty);
		}
		public static bool IsInsideAShape(Visio.Shape ovShape)
		{
			if ( ovShape.ContainingShape != ovShape.ContainingPage.PageSheet )
				return true;
			return false;
		}
		public static bool IsParentAPage(Visio.Shape ovShape)
		{
			if ( ovShape.ContainingShape == ovShape.ContainingPage.PageSheet )
				return true;
			return false;
		}
		public static void SetTrackCollision(Visio.Shape ovShape, bool bDirty)
		{
			EstablishUserCellValue(ovShape,ASITrackCollision,bDirty,true);
		}
		public static void SetTrackDimension(Visio.Shape ovShape, bool bDirty)
		{
			EstablishUserCellValue(ovShape,ASITrackDimension,bDirty,true);
		}

		public static void SetShapeDirty(Visio.Shape ovShape, bool bDirty)
		{
			EstablishUserCellValue(ovShape,ASIDirty,bDirty,true);
		}
		public static void SetAllShapeDirty(Visio.Shape ovShape, bool bDirty)
		{
			if ( GetASIKnowledge(ovShape).Length > 0 )
				EstablishUserCellValue(ovShape,ASIDirty,bDirty,true);

			foreach(Visio.Shape ovSubShape in ovShape.Shapes)
				SetAllShapeDirty(ovSubShape,bDirty);
		}
		public static bool IsShapeASIKnowledgeStyle(Visio.Shape ovShape, KnowledgeShapeType iStyle)
		{
			return iStyle.ToString().Equals(RetrieveUserCellValue(ovShape,ASIKnowledgeStyle));
		}
		public static string GetASIKnowledgeStyle(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIKnowledgeStyle);
		}
		public static string GetASIKnowledge(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIKnowledge);
		}
		public static string GetASIVersion(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIVersion);
		}
		public static string GetASIPublished(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIPublished);
		}

		public static bool GetASISearchSubShapes(Visio.Shape ovShape)
		{
			return RetrieveUserCellValueBool(ovShape,ASISearchSubShapes);
		}
		public static void SetASIKnowledge(Visio.Shape ovShape,string sValue)
		{
			EstablishUserCellValue(ovShape,ASIKnowledge,sValue,true);
		}
		public static void SetASIPublished(Visio.Shape ovShape,string sValue)
		{
			EstablishUserCellValue(ovShape,ASIPublished,sValue,true);
		}
		public static string GetASIKnowledgeDefault(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIKnowledgeDefault);
		}
		public static string GetASIMaster(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIMaster);
		}
		public static void SetASIMaster(Visio.Shape ovShape,string sValue)
		{
			EstablishUserCellValue(ovShape,ASIMaster,sValue,true);
		}
		public static string GetASIStencil(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIStencil);
		}
		public static void SetASIStencil(Visio.Shape ovShape,string sValue)
		{
			EstablishUserCellValue(ovShape,ASIStencil,sValue,true);
		}

		public static string GetASIName(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIName);
		}
		public static string GetASIType(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIType);
		}

		public static string GetASIConcept(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIConcept);
		}
		public static void SetASIConcept(Visio.Shape ovShape,string sValue)
		{
			EstablishUserCellValue(ovShape,ASIConcept,sValue,true);
		}
		public static string GetASIRelationship(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIRelationship);
		}
		public static string GetASIRole(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIRole);
		}
		public static string GetASIPresentation(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIPresentation);
		}
		public static void SetASIPresentation(Visio.Shape ovShape,string sValue)
		{
			EstablishUserCellValue(ovShape,ASIPresentation,sValue,true);
		}
		public static string GetASISource(Visio.Shape ovShape)
		{
			return UnwrapDQ(RetrieveUserCellValueFormula(ovShape,ASISource));
		}
		public static Visio.Cell SetASISource(Visio.Shape ovShape, string sValue)
		{
			return EstablishUserCellValue(ovShape,ASISource,sValue,true);
		}
		public static bool SetShapeWidthCell(Visio.Shape ovShape, object dValue)
		{
			string sFormula = string.Format("=Guard(MAX(User.TextWidth,SETATREFEXPR({0} in)))", dValue);
			return SetCellFormula(ovShape,"Width",sFormula,true);
		}
		public static bool SetShapeHeightCell(Visio.Shape ovShape, object dValue)
		{
			string sFormula = string.Format("=Guard(MAX(User.TextHeight,SETATREFEXPR({0} in)))", dValue);
			return SetCellFormula(ovShape,"Height",sFormula,true);
		}
		public static bool SetXFormCellFormula(Visio.Shape ovShape, short iCell, string sFormula)
		{
			try
			{
				Visio.Cell ovCell = ovShape.get_CellsSRC((short)Visio.VisSectionIndices.visSectionObject,(short)Visio.VisRowIndices.visRowTextXForm,(short)iCell);
				ovCell.FormulaForce = sFormula;
				return true;
			} 
			catch { }
			return false;
		}
		public static bool SetCellFormula(Visio.Shape ovShape, string sName, string sFormula, bool bForce)
		{
			try
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
					if ( bForce )
						ovShape.get_Cells(sName).FormulaForce = sFormula;
					else
						ovShape.get_Cells(sName).Formula = sFormula;

				return true;
			} 
			catch { }
			return false;
		}
		public static bool ReplaceCellFormula(Visio.Shape ovShape, string sName, string sFormula, bool bForce)
		{
			try
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				{
					string sOldFormula = ovShape.get_Cells(sName).Formula;
					if ( StringEndCompare(sOldFormula,sFormula.Replace("=","")) )
						return false;

					if ( bForce )
						ovShape.get_Cells(sName).FormulaForce = sFormula;
					else
						ovShape.get_Cells(sName).Formula = sFormula;
				}
				return true;
			} 
			catch { }
			return false;
		}
		public static bool SetAllCellFormula(Visio.Shape ovShape, string sName, string sFormula, bool bForce)
		{
			try
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
					if ( bForce )
						ovShape.get_Cells(sName).FormulaForce = sFormula;
					else
						ovShape.get_Cells(sName).Formula = sFormula;

				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					SetAllCellFormula(ovSubShape,sName,sFormula,bForce);

				return true;
			} 
			catch { }
			return false;
		}
		public static bool SetAllUserCellFormula(Visio.Shape ovShape, string sName, string sFormula, bool bForce)
		{
			try
			{
				EstablishUserCellFormula(ovShape,sName,sFormula,bForce);
				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					SetAllUserCellFormula(ovSubShape,sName,sFormula,bForce);

				return true;
			} 
			catch { }
			return false;
		}
		public static bool ReplaceAllCellFormula(Visio.Shape ovShape, string sName, string sOldFormula, string sNewFormula)
		{
			try
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				{
					Visio.Cell ovCell = ovShape.get_Cells(sName);
					string sFormula = ovCell.Formula;
					if ( StringCompare(sFormula,sOldFormula) )
						ovCell.FormulaForce = sNewFormula;
				}

				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					ReplaceAllCellFormula(ovSubShape,sName,sOldFormula,sNewFormula);

				return true;
			} 
			catch { }
			return false;
		}
		public static bool ReplaceAllCellFormula(Visio.Shape ovShape, string sName, string sFormula)
		{
			try
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				{
					Visio.Cell ovCell = ovShape.get_Cells(sName);
					string sOldFormula = ovCell.Formula;
					if ( string.Compare(sOldFormula,sFormula,true) != 0 )
						ovCell.FormulaForce = sFormula;
				}

				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					ReplaceAllCellFormula(ovSubShape,sName,sFormula);

				return true;
			} 
			catch { }
			return false;
		}
		public static bool ReplaceAllCellNullFormula(Visio.Shape ovShape, string sName, string sNewFormula)
		{
			try
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				{
					Visio.Cell ovCell = ovShape.get_Cells(sName);
					string sFormula = ovCell.Formula;
					if ( sFormula.Length == 0 )
						ovCell.FormulaForce = sNewFormula;
				}

				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					ReplaceAllCellNullFormula(ovSubShape,sName,sNewFormula);

				return true;
			} 
			catch { }
			return false;
		}
//		public static void ShowInheritsFlag(Visio.Shape ovShape, bool bInherits)
//		{
//			if ( bInherits )
//			{
//				SetCellFormula(ovShape,"LinePattern","=2",true);
//				SetCellFormula(ovShape,"BeginArrow","=30",true);
//				SetCellFormula(ovShape,"EndArrow","=22",true);
//			}
//			else
//			{
//				SetCellFormula(ovShape,"LinePattern","=",true);
//				SetCellFormula(ovShape,"BeginArrow","=",true);
//				SetCellFormula(ovShape,"EndArrow","=",true);
//			}
//		}

		public static bool SetASIFlagDisconnected(Visio.Shape ovShape)
		{
			int iCount = ovShape.Connects.Count;
			if ( iCount == 0 )
				SetASIShowFlag(ovShape,ShapeFlags.Error,"both ends of this shape are unglued");
			else if ( iCount != 2 )
				SetASIShowFlag(ovShape,ShapeFlags.Error,"at least one end of this shape is unglued");
			else
				return false;

			ShapeBuilder.EstablishComment(ovShape,"");
			return true;
		}
		public static void SetASIFlagWrongConnection(Visio.Shape ovShape, string sMySelf, string sFrom, string sTo)
		{
			ShapeBuilder.EstablishComment(ovShape,"");
			SetASIShowFlag(ovShape,ShapeFlags.Warning,string.Format("this [{0}] between [{1}] and [{2}] is ignored",sMySelf,sFrom,sTo));
		}
		public static void SetASIFlagWrongPlacement(Visio.Shape ovShape, string sMySelf, string sParent)
		{
			SetASIShowFlag(ovShape,ShapeFlags.Warning,string.Format("this [{0}] is ignored if placed inside any [{1}]",sMySelf,sParent));
		}
		public static void SetASIFlagClear(Visio.Shape ovShape)
		{
			SetASIShowFlag(ovShape,ShapeFlags.None,"");
		}
		public static void SetASIShowFlag(Visio.Shape ovShape, ShapeFlags iFlag, string sComment)
		{	
			bool bShow = true;
			string sLineWeight = "=";
			string sLineColor = "=";
			string sLinePattern = "=";
			string sFillForegndTrans = "=";

			switch ( iFlag )
			{
				case ShapeFlags.Error:
					sLinePattern = "=1";
					sLineWeight = "=7 pt";
					sLineColor = "=RGB(255,0,0)";
					break;
				case ShapeFlags.Warning:
					sLinePattern = "=1";
					sLineWeight = "=6 pt";
					//sLineColor = "=RGB(255,153,0)";
					sLineColor = "=RGB(255,255,0)";
					break;
				case ShapeFlags.Unused:
					sLinePattern = "=1";
					sLineWeight = "=5 pt";
					sLineColor = "=RGB(0,0,255)";
					sFillForegndTrans = "=.50";
					break;
				case ShapeFlags.None:
					bShow = false;
					break;
			}

			if ( SetCellFormula(ovShape,"LineWeight",sLineWeight,false) )
			{
				SetCellFormula(ovShape,"LinePattern",sLinePattern,false);
				SetCellFormula(ovShape,"LineColor",sLineColor,false);
				SetCellFormula(ovShape,"FillForegndTrans",sFillForegndTrans,false);
			}
			
			SetASIShowFlag(ovShape,bShow,sComment);
		}
		public static void SetASIShowFlag(Visio.Shape ovShape, bool bShow, string sComment)
		{
			if ( IsRunningExternalVisioUI )
				return;

			EstablishUserCellValue(ovShape,ASIShowFlag,bShow,true);
			EstablishUserCellValue(ovShape,ASIFlagType,sComment,true);

			string sDisable = string.Format("={0}", !bShow);
			if ( ovShape.OneD == (short)visTF.TRUE)
				EstablishSmartTagAction(ovShape,ASIShowFlag,sComment,"=2","=.5*Width","=.5*Height","0","0","=964",sDisable);
			else
				EstablishSmartTagAction(ovShape,ASIShowFlag,sComment,"=2","0","0","0","0","=964",sDisable);
		}
		public static void SetASIShowNoteFlag(Visio.Shape ovShape, bool bShow, string sComment)
		{
			if ( IsRunningExternalVisioUI )
				return;

			EstablishUserCellValue(ovShape,ASIShowNote,bShow,true);
			EstablishUserCellValue(ovShape,ASINoteType,sComment,true);

			string sDisable = string.Format("={0}", !bShow);
			if ( ovShape.OneD == (short)visTF.TRUE)
				EstablishSmartTagAction(ovShape,ASIShowNote,sComment,"=2","=.5*Width","=.5*Height","0","0","=0",sDisable);
			else
				EstablishSmartTagAction(ovShape,ASIShowNote,sComment,"=2","0","=1.0*Height","0","0","=0",sDisable);
		}
		public static Visio.Cell SetASIChildXML(Visio.Shape ovShape, string sValue)
		{
			ovShape.Data1 = sValue;
			return EstablishUserCellValue(ovShape,ASIChildXml,sValue.Length,true);
		}
		public static string GetASIChildXML(Visio.Shape ovShape)
		{
			string sResult = RetrieveUserCellValue(ovShape,ASIChildXml);
			if ( sResult != "" && double.Parse(sResult) > 0 )
				return ovShape.Data1;

			return "";
		}
		public static double AngleBegin(Visio.Shape ovShape)
		{
			double x1 = ovShape.get_Cells("Geometry1.X1").ResultIU;
			double y1 = ovShape.get_Cells("Geometry1.Y1").ResultIU;
			double x2 = ovShape.get_Cells("Geometry1.X2").ResultIU;
			double y2 = ovShape.get_Cells("Geometry1.Y2").ResultIU;
			return System.Math.Atan2(y2-y1,x2-x1) * 180.0 / System.Math.PI;
		}
		public static double AngleEnd(Visio.Shape ovShape)
		{
			int iLast = ovShape.get_RowCount((short)Visio.tagVisSectionIndices.visSectionFirstComponent);
			int iNext = iLast-1;
			double x1 = ovShape.get_Cells("Geometry1.X" + iNext.ToString()).ResultIU;
			double y1 = ovShape.get_Cells("Geometry1.Y" + iNext.ToString()).ResultIU;
			double x2 = ovShape.get_Cells("Geometry1.X" + iLast.ToString()).ResultIU;
			double y2 = ovShape.get_Cells("Geometry1.Y" + iLast.ToString()).ResultIU;
			return System.Math.Atan2(y2-y1,x2-x1) * 180.0 / System.Math.PI;
		}
		public static double PathLength(Visio.Shape ovShape)
		{
			Visio.Paths ovPaths = ovShape.Paths;
			if ( ovPaths.Count == 0 )
				return 0.0;

			double dLength = 0.0;
			foreach(Visio.Path ovPath in ovPaths)
			{

				double dX1=0, dX2=0, dY1=0, dY2=0;
				System.Array oArray = new Array[ovPath.Count];

				ovPath.Points(0.01,out oArray);
				for(int i=oArray.GetLowerBound(0); i< oArray.GetUpperBound(0); i += 2)
				{
					dX1 = (double)oArray.GetValue(i);
					dY1 = (double)oArray.GetValue(i+1);
					if ( i != oArray.GetLowerBound(0) )
					{
						double dDelta = System.Math.Pow(dX2-dX1,2) + System.Math.Pow(dY2-dY1,2);
						dLength += System.Math.Sqrt(dDelta);
					}
					dX2 = dX1;
					dY2 = dY1;
				}
			}
 
			return dLength;
		}
		public static void AddShapeLayers(Visio.Shape ovShape, ObjectCollection oList, bool bClear)
		{
			string sLayers = "";
			foreach(object oObject in oList)
				sLayers += oObject.ToString() + ";";

			AddShapeLayers(ovShape,sLayers,bClear);
		}
		public static void RemoveShapeLayers(Visio.Shape ovShape, ObjectCollection oList)
		{
			string sLayers = "";
			foreach(object oObject in oList)
				sLayers += oObject.ToString() + ";";

			RemoveShapeLayers(ovShape,sLayers);
		}
		public static void SetPageInvisible(Visio.Page ovPage, bool bHide, bool bChange)
		{
			if ( ovPage == null )
				return;

			if ( bHide )
			{
				ShapeBuilder.SetCellFormula(ovPage.PageSheet,"UIVisibility","=1",true);
				if ( bChange )
					ovPage.Background = (short)visTF.TRUE;
			}
			else
			{
				ShapeBuilder.SetCellFormula(ovPage.PageSheet,"UIVisibility","=0",true);
				if ( bChange )
					ovPage.Background = (short)visTF.FALSE;
			}
		}
		
		public static void RenumberPages(Visio.Document ovDoc)
		{
			int iTotal = 0;
			foreach(Visio.Page ovPage in ovDoc.Pages)
				if ( ShapeBuilder.RetrieveCellValue(ovPage.PageSheet,"UIVisibility") == 0.0 )
					iTotal++;

			int iCount = 0;
			foreach(Visio.Page ovPage in ovDoc.Pages)
				if ( ShapeBuilder.RetrieveCellValue(ovPage.PageSheet,"UIVisibility") == 0.0 )
				{
					iCount++;
					Visio.Shape ovShape = ovPage.PageSheet;
					string sCount = WrapDQ(string.Format("{0}",iCount));
					ShapeBuilder.SetAllUserCellFormula(ovShape,"PageNumber",sCount,true);
					string sTotal = WrapDQ(string.Format("{0}",iTotal));
					ShapeBuilder.SetAllUserCellFormula(ovShape,"PageTotal",sTotal,true);
					string sPageOf = WrapDQ(string.Format("{0} of {1}",iCount,iTotal));
					ShapeBuilder.SetAllUserCellFormula(ovShape,"PageOf",sPageOf,true);
				}
		}


		public static void AddShapeLayers(Visio.Shape ovShape, string sLayers, bool bClearFirst)
		{
			Visio.Page ovPage = ovShape.ContainingPage;
			Visio.Master ovMaster = ovShape.ContainingMaster;
			Visio.Layer oLayer = null;

			if ( bClearFirst )
			{
				ArrayList oList = new ArrayList();
				for(int i=0; i<ovShape.LayerCount; i++)
				{
					short iLayer = (short)(i+1);
					Visio.Layer ovLayer = ovShape.get_Layer(iLayer);
					oList.Add(ovLayer);
				}

				foreach(Visio.Layer ovLayer in oList)
					ovLayer.Remove(ovShape,0);
			}

			foreach(string sLayer in sLayers.Split(';'))
			{
				string sName = TrimString(sLayer);
				if ( sName.Length == 0 )
					continue;

				if ( ovPage != null )
					oLayer = ovPage.Layers.Add(sName);
				else if ( ovMaster != null )
					oLayer = ovMaster.Layers.Add(sName);

//				string sShape = ovShape.Name;
//				string sMaster = ovShape.Master.Name;


				oLayer.Add(ovShape,(short)0);
			}
		}
		public static void RemoveShapeLayers(Visio.Shape ovShape, string sLayers)
		{
			ArrayList oList = new ArrayList();
			for(int i=0; i<ovShape.LayerCount; i++)
			{
				short iLayer = (short)(i+1);
				Visio.Layer ovLayer = ovShape.get_Layer(iLayer);
				oList.Add(ovLayer);
			}

			if ( sLayers == "*" )
			{
				foreach(Visio.Layer ovLayer in oList)
					ovLayer.Remove(ovShape,0);

				return;
			}

			foreach(Visio.Layer ovLayer in oList)
			{
				foreach(string sLayer in sLayers.Split(';'))
				{
					if ( StringCompare(sLayer,ovLayer.Name) )
						ovLayer.Remove(ovShape,0);
					else if ( StringCompare(sLayer,ovLayer.NameU) )
						ovLayer.Remove(ovShape,0);
				}
			}

		}
		public static int RefreshCAD(Visio.Page ovPage)
		{
			int iCount = 0;

			ovPage.Application.ScreenUpdating = (short)visTF.TRUE;

			foreach(Visio.Shape ovShape in ovPage.Shapes)
			{
				if ( ovShape.ObjectType != (short)17 )
					continue;

				iCount++;

				SetCellFormula(ovShape,"LockAspect","=1",true);
				SetCellFormula(ovShape,"LockWidth","=0",true);
				SetCellFormula(ovShape,"LockHeight","=0",true);
				SetCellFormula(ovShape,"LockSelect","=0",true);
				SetCellFormula(ovShape,"NoCtlHandles","=False",true);

				double dPinX = ovShape.get_Cells("PinX").ResultIU;
				SetCellFormula(ovShape,"PinX",string.Format("={0}", dPinX + 1),true);
				SetCellFormula(ovShape,"PinX",string.Format("={0}", dPinX),true);
			}
			return iCount;
		}

		public static void ShapeDoubleClickGOTOPAGE(Visio.Shape ovShape, string sPageName)
		{
			Visio.Cell ovCell = ovShape.get_Cells("EventDblClick");
			if ( sPageName.Length > 0 )
				ovCell.Formula = string.Format("=GOTOPAGE({0})", WrapDQ(sPageName));
			else
				ovCell.Formula = "=NA()";
		}
		public static Visio.Cell SetASIModelGUID(Visio.Shape ovShape, string sGUID)
		{
			return EstablishUserCellValue(ovShape,ASIGUID,sGUID,true);
		}
		public static string GetASIModelGUID(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIGUID);
		}
		public static Visio.Cell SetASIApprenticeID(Visio.Shape ovShape, string sGUID)
		{
			return EstablishUserCellValue(ovShape,ASIApprenticeID,sGUID,true);
		}
		public static string GetASIApprenticeID(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIApprenticeID);
		}

		public static Visio.Cell SetASIGUIDQuery(Visio.Shape ovShape, string sElement, string sGUID)
		{
			string sQuery = @"//" + sElement + "[@GUID='" + sGUID + "']";
			return EstablishUserCellValue(ovShape,ASIGUIDQuery,sQuery,true);
		}
		public static Visio.Cell ClearASIGUIDQuery(Visio.Shape ovShape)
		{
			if ( !DoesUserCellExist(ovShape,ASIGUIDQuery) )
				return null;

			return EstablishUserCellValue(ovShape,ASIGUIDQuery,"",true);
		}
		public static string GetASIGUIDQuery(Visio.Shape ovShape)
		{
			return RetrieveUserCellValue(ovShape,ASIGUIDQuery);
		}
		public static Visio.Cell EstablishSmartTagAction(Visio.Shape ovShape, string sTagName, string sDescription)
		{
			if (ovShape == null )
				return null;

			string sRowName = sTagName.Replace(" ","_");

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionSmartTag, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionSmartTag);

    
			Visio.Cell ovCell = null;
			string sName = "SmartTags." + sRowName + ".TagName";
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				ovCell = ovShape.get_Cells(sName);

			if ( ovCell != null )
				return ovCell;

			//Code to auto create and position Smart tag at corners
			switch ( ovShape.get_RowCount((short)Visio.VisSectionIndices.visSectionSmartTag) )
			{
				case 0:
					ovCell = EstablishSmartTagAction(ovShape,sTagName,sDescription,"=1","0","0","0","0","0","=False");
					break;
				case 1:
					ovCell = EstablishSmartTagAction(ovShape,sTagName,sDescription,"=1","Width","0","2","0","0","=False");
					break;
				case 3:
					ovCell = EstablishSmartTagAction(ovShape,sTagName,sDescription,"=1","0","Height","0","2","0","=False");
					break;
				case 4:
					ovCell = EstablishSmartTagAction(ovShape,sTagName,sDescription,"=1","Width","Height","2","2","0","=False");
					break;
				default:
					ovCell = EstablishSmartTagAction(ovShape,sTagName,sDescription,"=1","=","=","=","=","=","=False");
					break;
			}
			return ovCell;
		}

		public static Visio.Cell EstablishSmartTagAction(Visio.Shape ovShape, string sTagName, string sDescription, string sDisplayMode, string sFormulaX, string sFormulaY, string sJustifyX, string sJustifyY, string sFace, string sDisabled)
		{
			string sRowName = sTagName.Replace(" ","_");

			Visio.Cell ovCell = EstablishSmartTagCellFormula(ovShape,sRowName,"TagName",WrapDQ(sTagName),true);
			try
			{
				ovShape.get_Cells("SmartTags." + sRowName + ".DisplayMode").FormulaForce = sDisplayMode;
				ovShape.get_Cells("SmartTags." + sRowName + ".Description").FormulaForce = WrapDQ(sDescription);
				ovShape.get_Cells("SmartTags." + sRowName + ".X").FormulaForce = sFormulaX;
				ovShape.get_Cells("SmartTags." + sRowName + ".Y").FormulaForce = sFormulaY;
				ovShape.get_Cells("SmartTags." + sRowName + ".XJustify").FormulaForce = sJustifyX;
				ovShape.get_Cells("SmartTags." + sRowName + ".YJustify").FormulaForce = sJustifyY;
				ovShape.get_Cells("SmartTags." + sRowName + ".ButtonFace").FormulaForce = sFace;
				ovShape.get_Cells("SmartTags." + sRowName + ".Disabled").FormulaForce = sDisabled;
			}
			catch {}
			return ovCell;
		}
//		public static Visio.Cell EstablishSmartTagAction(Visio.Shape ovShape, string sTagName, string sMenu, string sEvent)
//		{
//			string sRowName = sTagName.Replace(" ","_");
//
//			Visio.Cell ovCell = EstablishSmartTagCellFormula(ovShape,sRowName,"TagName",WrapDQ(sTagName),true);
//			Visio.Cell ovMenuCell = EstablishActionMenu(ovShape,sMenu,sEvent);
//			ovShape.get_Cells(ovMenuCell.Name + ".TagName").FormulaForce = WrapDQ(sTagName);
//			return ovCell;
//		}
//		public static Visio.Cell EstablishActionMenu(Visio.Shape ovShape, string sMenu, string sEvent)
//		{
//			string sRowName = sEvent.Replace(" ","_");
//
//			EstablishUserCell(ovShape,ASIGUID);
//			Visio.Cell ovCell = EstablishActionCellFormula(ovShape,sRowName,WrapDQ(sMenu),true);
//			ovShape.get_Cells(ovCell.Name + ".Action").FormulaForce = MarkerEventFormula(sEvent);
//			return ovCell;
//		}
		public static void RemoveChildXml(Visio.Document ovDocument)
		{
			foreach(Visio.Page ovPage in ovDocument.Pages)
				foreach(Visio.Shape ovShape in ovPage.Shapes)
					RemoveChildXml ( ovShape, true );
		}	
		public static void RemoveChildXml(Visio.Shape ovShape, bool bDeep)
		{
			if ( bDeep)
				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					RemoveChildXml ( ovSubShape, true );

			if ( ovShape.Data1.Length == 0 )
				return;

			ovShape.Data1 = "";
			EstablishUserCellValue(ovShape,ASIChildXml,0,true);
		}	
		public static void CleanUpText(Visio.Document ovDocument)
		{
			foreach(Visio.Page ovPage in ovDocument.Pages)
				foreach(Visio.Shape ovShape in ovPage.Shapes)
					CleanUpText ( ovShape, true );
		}	
		public static void CleanUpText(Visio.Shape ovShape, bool bDeep)
		{
			if ( bDeep)
				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					CleanUpText ( ovSubShape, true );

			CleanUpText(ovShape);
		}	
		public static string CleanUpText(Visio.Shape ovShape)
		{
			if (ovShape == null)
				return "";
    
			string sText = ovShape.Text;
			if ( sText.Length == 0 )
				return "";

			string sNewTest = TrimString(sText);
			try 
			{
				if ( sNewTest != sText )
				{
					ovShape.Text = sNewTest;
					SetShapeDirty(ovShape,true);
					if ( ovShape.OneD == (short)visTF.FALSE )
					{
						SetCellFormula(ovShape,"Height","=0",false);
						SetCellFormula(ovShape,"Width","=0",false);
					}
					//SetParentShapeDirty(ovShape,true);
				}
			} 
			catch {}
			return sNewTest;
		}
		public static void UpdateAttributesFromShapeCells(Visio.Shape ovShape, XmlElement oXmlElement)
		{
			try
			{
				oXmlElement.SetAttribute("PinX",ovShape.get_Cells("PinX").ResultIU.ToString());
				oXmlElement.SetAttribute("PinY",ovShape.get_Cells("PinY").ResultIU.ToString());
				oXmlElement.SetAttribute("Width",ovShape.get_Cells("Width").ResultIU.ToString());
				oXmlElement.SetAttribute("Height",ovShape.get_Cells("Height").ResultIU.ToString());
			} 
			catch {}
		}
		public static void ToggleLockLocation(Visio.Shape ovShape)
		{
			try
			{
				ovShape.get_Cells("LockMoveX").ResultIUForce = ovShape.get_Cells("LockMoveX").ResultIU == 0 ? 1 : 0;
				ovShape.get_Cells("LockMoveY").ResultIUForce = ovShape.get_Cells("LockMoveY").ResultIU == 0 ? 1 : 0;
				ovShape.get_Cells("LockWidth").ResultIUForce = ovShape.get_Cells("LockWidth").ResultIU == 0 ? 1 : 0;
				ovShape.get_Cells("LockHeight").ResultIUForce = ovShape.get_Cells("LockHeight").ResultIU == 0 ? 1 : 0;
			} 
			catch {}
		}
		public static void ToggleFlip(Visio.Shape ovShape, string sCellName)
		{
			try
			{
				ovShape.get_Cells(sCellName).ResultIUForce = ovShape.get_Cells(sCellName).ResultIU == 0 ? 1 : 0;
			} 
			catch {}
		}
		public static void ToggleRouteStyle(Visio.Shape ovShape, int iRouteStyle, int iConLineRouteExt, int iConFixedCode)
		{
			try
			{
				ovShape.get_Cells("ShapeRouteStyle").ResultIUForce = iRouteStyle;
				ovShape.get_Cells("ConLineRouteExt").ResultIUForce = iConLineRouteExt;
				ovShape.get_Cells("ConFixedCode").ResultIUForce = iConFixedCode;
			} 
			catch {}
		}
		public static void ToggleHideText(Visio.Shape ovShape)
		{
			try
			{
				ovShape.get_Cells("HideText").ResultIUForce = ovShape.get_Cells("HideText").ResultIU == 0 ? 1 : 0;
			} 
			catch {}
		}
		public static bool IsLocationLocked(Visio.Shape ovShape)
		{
			try
			{
				return ovShape.get_Cells("LockMoveX").ResultIU == 0 ? false : true;
			} 
			catch {}
			return false;
		}
		public static string RetrieveCleanText(Visio.Shape ovShape, bool bIncludeReturns)
		{
			if (ovShape == null)
				return "";
    
			return ApprenticeObject.CleanText( ovShape.Text, bIncludeReturns );
		}
		public static Visio.Page DoesPageExist(string sName, Visio.Document ovDoc)
		{
			try 
			{
				foreach(Visio.Page ovPage in ovDoc.Pages)
					if ( StringCompare(ovPage.Name,sName) || StringCompare(ovPage.NameU,sName) )
						return ovPage;
			} 
			catch {}
			return null;
		}
		public static string TrimMasterName(string sMaster)
		{
			string[] sNames = sMaster.Split('.');
			
			if ( sNames.Length == 1 )
				return sMaster;

			string sName = "";
			int iTotal = sNames.Length-1;
			for(int i=0; i<iTotal; i++)
				sName += sNames[i];

			return sName;
		}
		public static Visio.Master DoesMasterExist(string sName, Visio.Document ovDoc)
		{
			try 
			{
				foreach(Visio.Master ovMaster in ovDoc.Masters)
				{
					string sMaster = TrimMasterName(ovMaster.Name);
					if (StringCompare(sMaster,sName))
						return ovMaster;
				}
			} 
			catch {}
			return null;
		}
		public static Visio.Master CopyMasters(Visio.Document ovSource, Visio.Document ovTarget, bool bNoDupe)
		{
			try 
			{
				foreach(Visio.Master ovMaster in ovSource.Masters)
					if ( !bNoDupe )
						ovTarget.Drop(ovMaster,0,0);
					else if ( DoesMasterExist(ovMaster.NameU,ovTarget) != null )
						ovTarget.Drop(ovMaster,0,0);
			}
			catch {}
			return null;
		}
		public static string EstablishGUIDforShape(Visio.Document ovDocument)
		{
			return EstablishGUIDforShape(ovDocument.DocumentSheet);
		}
		public static string EstablishGUIDforShape(Visio.Page ovPage)
		{
			return EstablishGUIDforShape(ovPage.PageSheet);
		}

		public static string EstablishGUIDforShape(Visio.Shape ovShape)
		{
			if ( ovShape == null )
				return "";

			//string sPageName = ovShape.ContainingPage.Name;
			//string sShapeText = ovShape.Text;
			string sGUID = "";
			try
			{
				short iType = ovShape.Type;
				switch ( iType ) 
				{
					case (short)Visio.VisShapeTypes.visTypePage:
						sGUID = ovShape.get_UniqueID((short)Visio.VisUniqueIDArgs.visGetOrMakeGUID);
						break;
					case (short)Visio.VisShapeTypes.visTypeDoc:
						sGUID = ovShape.get_UniqueID((short)Visio.VisUniqueIDArgs.visGetOrMakeGUID);
						break;
					default:
						string sShape = ovShape.get_UniqueID((short)Visio.VisUniqueIDArgs.visGetOrMakeGUID);
                        if (ovShape.ContainingPage != null)
                        {
						    string sPage = ovShape.ContainingPage.PageSheet.get_UniqueID((short)Visio.VisUniqueIDArgs.visGetOrMakeGUID);
						    sGUID = string.Format("{0}:{1}",sPage,sShape);
                        }
                        else if (ovShape.ContainingMaster != null)
                        {
                            string sMaster = ovShape.ContainingMaster.PageSheet.get_UniqueID((short)Visio.VisUniqueIDArgs.visGetOrMakeGUID);
                            sGUID = string.Format("{0}:{1}", sMaster, sShape);
                        }
                        else
                        {
                             sGUID = string.Format("{0}", sShape);
                        }
						break;
				}
			}
			catch (Exception e)
			{
				ApprenticeObject.ReportException(e);
			}		
			return sGUID;
		}

		public static void ClearGUIDforShape(Visio.Shape ovShape, bool bDeep)
		{
			if ( ovShape == null )
				return;

			ovShape.get_UniqueID((short)Visio.VisUniqueIDArgs.visDeleteGUID);
			ClearASIGUIDQuery(ovShape);
			if ( ovShape.OneD == (short)visTF.TRUE )
			{
				ShapeBuilder.RemoveUserCell(ovShape,"ASILinkSink");
				ShapeBuilder.RemoveUserCell(ovShape,"ASILinkSource");
			}


			if ( bDeep )
				foreach(Visio.Shape ovSubShape in ovShape.Shapes)
					ClearGUIDforShape(ovSubShape,true);
		}


		public static void ResizePage(Visio.Page ovPage, string sWidth, string sHeight)
		{
			Visio.Shape ovPageShape = ovPage.PageSheet;
			SetCellFormula(ovPageShape,"PageWidth",sWidth,true);
			SetCellFormula(ovPageShape,"PageHeight",sHeight,true);
		}
		public static bool GetDropXY(Visio.Window ovWindow, Visio.Page ovPage, out double dPinX, out double dPinY)
		{
			double dLeft;
			double dTop;
			double dWidth;
			double dHeight;

			try
			{
				ovWindow.GetViewRect(out dLeft,out dTop,out dWidth,out dHeight);
				dPinX = dLeft + 0.5 * dWidth;
				dPinY = dTop - 0.5 * dHeight;
				return true;
			}
			catch{}

			Visio.Shape ovShape = ovPage.PageSheet;

			dPinX = ovShape.get_Cells("PageWidth").ResultIU / 2;
			dPinY = ovShape.get_Cells("PageHeight").ResultIU / 2;
			return false;
		}
		public static Visio.Shape DropMasterOnPage(Visio.Master ovMaster, Visio.Page ovPage, double dPersentWidth, double dPercentHeight, double dAngle)
		{
			Visio.Application ovApp = ovPage.Application;
			Visio.Shape ovShape = null;
			Visio.Shape ovPageShape = ovPage.PageSheet;
			short iEvents = ovApp.EventsEnabled;
			ovApp.EventsEnabled = (short)visTF.FALSE;
			try 
			{
				double dPinX = dPersentWidth * ovPageShape.get_Cells("PageWidth").ResultIU; 
				double dPinY = dPercentHeight * ovPageShape.get_Cells("PageHeight").ResultIU;

				ovShape = ovPage.Drop(ovMaster,dPinX,dPinY);
				ovShape.get_Cells("PinX").Formula = "ThePage!PageWidth*" + dPersentWidth.ToString();
				ovShape.get_Cells("PinY").Formula = "ThePage!PageHeight*" + dPercentHeight.ToString();
				ovShape.get_Cells("Angle").Formula = dAngle.ToString();
			}
			catch
			{
				ovApp.EventsEnabled = iEvents;
			}
			ovApp.EventsEnabled = iEvents;
			return ovShape;
		}
		public static void SetShapeText(Visio.Shape ovShape, string sText)
		{
			Visio.Application ovApp = ovShape.Application;
			short iEvents = ovApp.EventsEnabled;
			ovApp.EventsEnabled = (short)visTF.FALSE;
			try 
			{
				//string sCurrent = ovShape.Text;
				ovShape.Text = sText;
			}
			catch {}
			ovApp.EventsEnabled = iEvents;
		}
		public static void GlueShapes(Visio.Shape ovFromShape, Visio.Shape ovToShape, string sCellName, double dToX, double dToY)
		{
			Visio.Application ovApp = ovFromShape.Application;
			try 
			{
				ovFromShape.get_Cells(sCellName).GlueToPos(ovToShape,dToX,dToY);
			}
			catch {}
		}
		public static Visio.Shape LinkShapes(Visio.Shape ovFromShape, Visio.Shape ovToShape, Visio.Master ovMaster, double dFromX, double dFromY, double dToX, double dToY)
		{
			Visio.Application ovApp = ovFromShape.Application;
			Visio.Shape ovLink = null;
			try 
			{
				ovLink = ovFromShape.ContainingPage.Drop(ovMaster,0,0);
				ovLink.get_Cells("BeginX").GlueToPos(ovFromShape,dFromX,dFromY);
				ovLink.get_Cells("EndX").GlueToPos(ovToShape,dToX,dToY);
			}
			catch {}
			return ovLink;
		}
		public static Visio.Shape LinkShapes(Visio.Shape ovFromShape, Visio.Shape ovToShape, Visio.Master ovMaster, Visio.Cell ovFromCell, Visio.Cell ovToCell)
		{
			Visio.Application ovApp = ovFromShape.Application;
			Visio.Shape ovLink = null;
			short iEvents = ovApp.EventsEnabled;
			ovApp.EventsEnabled = (short)visTF.FALSE;
			try 
			{
				ovLink = ovFromShape.ContainingPage.Drop(ovMaster,0,0);
				ovLink.get_Cells("BeginX").GlueTo(ovFromCell);
				ovLink.get_Cells("EndX").GlueTo(ovToCell);
			}
			catch
			{
				ovApp.EventsEnabled = iEvents;
			}
			ovApp.EventsEnabled = iEvents;
			return ovLink;
		}
//		public static Visio.Shape LinkShapes(Visio.Shape ovFromShape, Visio.Shape ovToShape)
//		{
//			visio
//			return LinkShapes(ovFromShape, ovToShape, "Link");
//		}
		public static Visio.Shape LinkShapes(Visio.Shape ovFromShape, Visio.Shape ovToShape, Visio.Master ovMaster)
		{
			Visio.Application ovApp = ovFromShape.Application;
			Visio.Shape ovLink = null;
			short iEvents = ovApp.EventsEnabled;
			ovApp.EventsEnabled = (short)visTF.FALSE;
			try 
			{
				ovLink = ovFromShape.ContainingPage.Drop(ovMaster,0,0);
				ovLink.get_Cells("BeginX").GlueTo(ovFromShape.get_Cells("PinX"));
				ovLink.get_Cells("EndX").GlueTo(ovToShape.get_Cells("PinX"));
			}
			catch
			{
				ovApp.EventsEnabled = iEvents;
			}
			ovApp.EventsEnabled = iEvents;
			return ovLink;
		}
		public static void ShapeRouting(Visio.Shape ovLinkShape, string sRouting)
		{
			string sFormula = "=";
			switch ( sRouting )
			{
				case "Straight":
					sFormula = "=2";
					break;
				case "DownRight":
					sFormula = "=1";
					break;
				default:
					break;
			}
			SetCellFormula(ovLinkShape,"ShapeRouteStyle",sFormula,false);
		}
		public static Visio.Shape FindHitKnowledgeShape(Visio.Shape ovShape, bool bDeadOn)
		{
			return FindHitKnowledgeShape(ovShape,"",bDeadOn);
		}
		public static Visio.Shape FindHitKnowledgeShape(Visio.Shape ovShape, string[] sTargets, bool bDeadOn)
		{
			foreach (string sTarget in sTargets)
			{
				Visio.Shape ovFound = FindHitKnowledgeShape(ovShape,sTarget,bDeadOn);
				if ( ovFound != null )
					return ovFound;
			}
			return null;
		}
		private static double square ( double x ) { return (x * x); }
		public static Visio.Shape FindHitKnowledgeShape(Visio.Shape ovShape, string sTarget, bool bDeadOn)
		{
			double dPinX = ovShape.get_Cells("PinX").ResultIU;
			double dPinY = ovShape.get_Cells("PinY").ResultIU;
			
			short visSpace = ((short)Visio.VisSpatialRelationCodes.visSpatialOverlap + (short)Visio.VisSpatialRelationCodes.visSpatialTouching + (short)Visio.VisSpatialRelationCodes.visSpatialContainedIn + (short)Visio.VisSpatialRelationCodes.visSpatialContain);
			short visRelate = (short)(Visio.VisSpatialRelationFlags.visSpatialFrontToBack);
			Visio.Selection ovSelection = ovShape.get_SpatialNeighbors(visSpace, 0.0, visRelate, null);

			string sText = "";
			double dShortestDistance = 10000;
			Visio.Shape ovBestShape = null;
			foreach(Visio.Shape ovHitShape in ovSelection)
			{
				if ( sTarget.Length > 0 )
				{
					string sMyType = ShapeBuilder.GetASIKnowledge(ovHitShape);
					if ( sMyType.Length == 0 )
						continue;

					if (string.Compare(sMyType,sTarget,true) != 0)
						continue;
				}

				double dDistance = square(dPinX - ovHitShape.get_Cells("PinX").ResultIU) + square(dPinY - ovHitShape.get_Cells("PinY").ResultIU);
				dDistance = System.Math.Sqrt(dDistance);
				if ( dDistance >= dShortestDistance )
					continue;

				dShortestDistance = dDistance;
				sText = ovHitShape.Text;
				ovBestShape = ovHitShape;
				if ( bDeadOn && dDistance == 0.0 )
					return ovBestShape;
			}
			return ovBestShape;
		}
		#region Visio Cell Readers and Writers

		public static void CopyUserCellValue(Visio.Shape ovFromShape, string sFromCell, Visio.Shape ovToShape, string sToCell)
		{
			EstablishUserCellValue(ovToShape, sToCell, RetrieveUserCellValue(ovFromShape, sFromCell).ToString(),true);
		}

		public static bool RemoveUserCell(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return false;
    
			string sName = "User." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				return false;

			try
			{
				Visio.Cell ovCell = ovShape.get_Cells(sName);
				ovShape.DeleteRow((short)Visio.VisSectionIndices.visSectionUser, (short)ovCell.Row);
			}
			catch 
			{
				return false;
			}
			return true;
		}
		public static bool CollectUserCells(Visio.Shape ovShape, ObjectCollection oList)
		{
			if (ovShape == null)
				return false;
    
			int iRowCount = ovShape.get_RowCount((short)Visio.VisSectionIndices.visSectionUser);
			for(int iRow = 0; iRow<iRowCount; iRow++)
				try
				{
					Visio.Cell ovCell = ovShape.get_CellsSRC((short)Visio.VisSectionIndices.visSectionUser,(short)iRow,(short)0);

					string sName = ovCell.Name.Remove(0,5);
					if ( sName.StartsWith("ASI") )
						continue;

					RestoreableValue oRestoreable = new RestoreableValue(sName);
					oRestoreable.Value = ovCell.get_ResultStr(Visio.VisUnitCodes.visNoCast);
					oList.Add(oRestoreable);
				}
				catch {}

			return true;
		}
		public static void EstablishComment(Visio.Shape ovShape, string sComment)
		{
			string sNote = sComment.Replace('"',' ');
			Visio.Cell ovCell = ovShape.get_Cells("Comment");
			ovCell.FormulaForce = string.Format("=GUARD({0})", ApprenticeObject.WrapDQ(sNote) );
		}
		public static Visio.Cell EstablishUserCell(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null )
				return null;

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionUser, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionUser);

			if ( sCellName.EndsWith(".Prompt") )
				EstablishUserCell(ovShape,sCellName.Remove(sCellName.Length-7,7));

			string sName = "User." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.FALSE )
				ovShape.AddNamedRow((short)Visio.VisSectionIndices.visSectionUser,sCellName,(short)visTF.FALSE);

			try 
			{
				return ovShape.get_Cells(sName);
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishScratchCell(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null )
				return null;

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionScratch, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionScratch);

			string sName = "Scratch." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.FALSE )
				ovShape.AddRow((short)Visio.VisSectionIndices.visSectionScratch,(short)Visio.VisRowIndices.visRowScratch,(short)visTF.FALSE);

			try 
			{
				return ovShape.get_Cells(sName);
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishUserCellValue(Visio.Shape ovShape, string sName, bool bValue, bool bForce)
		{
			try 
			{
				Visio.Cell ovCell = EstablishUserCell(ovShape,sName);
				if ( bForce == true )
					ovCell.FormulaForce = bValue.ToString();
				else
					ovCell.Formula = bValue.ToString();

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishUserCellValue(Visio.Shape ovShape, string sName, string sValue, bool bForce)
		{
			try 
			{
				Visio.Cell ovCell = EstablishUserCell(ovShape,sName);
				if ( bForce == true )
					ovCell.FormulaForce = WrapDQ(sValue);
				else
					ovCell.Formula = WrapDQ(sValue);

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishUserCellFormula(Visio.Shape ovShape, string sName, string sFormula, bool bForce)
		{
			try 
			{
				Visio.Cell ovCell = EstablishUserCell(ovShape,sName);
				if ( bForce == true )
					ovCell.FormulaForce = sFormula;
				else
					ovCell.Formula = sFormula;

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishScratchCellFormula(Visio.Shape ovShape, string sName, string sFormula, bool bForce)
		{
			try 
			{
				Visio.Cell ovCell = EstablishScratchCell(ovShape,sName);
				if ( bForce == true )
					ovCell.FormulaForce = sFormula;
				else
					ovCell.Formula = sFormula;

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static bool RetrieveUserCellValueBool(Visio.Shape ovShape, string sCellName)
		{
			try
			{
				string sName = "User." + sCellName;
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				{
					double dValue = ovShape.get_Cells(sName).get_Result(Visio.VisUnitCodes.visNumber);
					bool bResult = System.Convert.ToBoolean(dValue);
					return bResult; // == false ? false : true;
				}
				return false;
			}
			catch(Exception )
			{
				throw new ApprenticeException( "Shape cannot return bool value for " +  sCellName);
			}
		}
		public static string RetrieveUserCellValueFormula(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return "";
    
			string sName = "User." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				return ovShape.get_Cells(sName).Formula;

			return "";
		}
		public static string RetrieveUserCellValue(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return "";
    
			string sName = "User." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				return ovShape.get_Cells(sName).get_ResultStr(Visio.VisUnitCodes.visNoCast);

			return "";
		}
		public static string RetrievePropCellValue(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return "";
    
			string sName = "Prop." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				return ovShape.get_Cells(sName).get_ResultStr(Visio.VisUnitCodes.visNoCast);

			return "";
		}
		public static object EvaluateExpressionToNumber(Visio.Shape ovShape, string sVisioFormula, bool bEventsOn)
		{
			object oResult = null;
			if (ovShape == null)
				return oResult;

			Visio.Application oApp = ovShape.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			try
			{
				Visio.Cell ovCell = EstablishUserCell(ovShape,"ASIEval");
				ovCell.FormulaForce = sVisioFormula;
				oResult = ovCell.get_Result(Visio.VisUnitCodes.visNumber);
				if ( oResult.Equals(0.0) )
				{
					string sResult = ovCell.get_ResultStr(Visio.VisUnitCodes.visNoCast);
					sResult = sResult.Replace("in.","");
					if ( !ApprenticeObject.IsNumber(sResult) )
						oResult = null;
				}
			}
			catch {}
			oApp.EventsEnabled = iEvents;
			return oResult;
		}
		public static object EvaluateExpressionToString(Visio.Shape ovShape, string sVisioFormula, bool bEventsOn)
		{
			object oResult = null;
			if (ovShape == null)
				return oResult;

			Visio.Application oApp = ovShape.Application;
			short iEvents = oApp.EventsEnabled;

			oApp.EventsEnabled = ( bEventsOn ) ? (short)visTF.TRUE : (short)visTF.FALSE;

			try
			{
				Visio.Cell ovCell = EstablishUserCell(ovShape,"ASIEval");
				ovCell.FormulaForce = sVisioFormula;
				oResult = ovCell.get_ResultStr(Visio.VisUnitCodes.visNoCast);
			}
			catch {}
			oApp.EventsEnabled = iEvents;
			return oResult;
		}
		public static double RetrieveCellValue(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return 0.0;
    
			return ovShape.get_Cells(sCellName).get_Result(Visio.VisUnitCodes.visNumber);
		}
		public static bool DoesCellValueEqual(Visio.Shape ovShape, string sCellName, object oValue)
		{
			if (ovShape == null)
				return false;

			Visio.Cell ovCell = null;
			try
			{
				ovCell = ovShape.get_Cells(sCellName);
			}
			catch
			{
				return false;
			}

			return AreEqual(oValue,ovCell.get_Result(Visio.VisUnitCodes.visNumber));
		}
		public static Visio.Cell EstablishUserCellValue(Visio.Shape ovShape, string sName, object oValue, bool bForce)
		{
			if (ovShape == null )
				return null;

			try 
			{
				Visio.Cell ovCell = EstablishUserCell(ovShape,sName);
				if ( bForce == true )
					ovCell.FormulaForce = oValue.ToString();
				else
					ovCell.Formula = oValue.ToString();

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static bool DoesCellExist(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return false;
    
			if ( ovShape.get_CellExistsU(sCellName, (short)visTF.FALSE) == (short)visTF.TRUE )
				return true;

			return false;
		}
		public static bool DoesUserCellExist(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return false;
    
			string sName = "User." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.TRUE )
				return true;

			return false;
		}
		public static bool RemoveActionCell(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return false;
    
			string sName = "Actions." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				return false;

			Visio.Cell ovCell = ovShape.get_Cells(sName);
			ovShape.DeleteRow((short)Visio.VisSectionIndices.visSectionAction, (short)ovCell.Row);
			return true;
		}
		public static Visio.Cell EstablishActionCellFormula(Visio.Shape ovShape, string sCellName, string sFormula, bool bForce)
		{
			if (ovShape == null )
				return null;

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionAction, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionAction);

    
			string sName = "Actions." + sCellName;
			try 
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.FALSE )
					ovShape.AddNamedRow((short)Visio.VisSectionIndices.visSectionAction,sCellName,(short)visTF.FALSE);

				Visio.Cell ovCell = ovShape.get_Cells(sName);
				if ( bForce == true )
					ovCell.FormulaForce = sFormula;
				else
					ovCell.Formula = sFormula;

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishHyperlinkCellFormula(Visio.Shape ovShape, string sCellName, string sFormula, bool bForce)
		{
			if (ovShape == null )
				return null;

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionHyperlink, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionHyperlink);

    
			string sName = "Actions." + sCellName;

			try 
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.FALSE )
					ovShape.AddNamedRow((short)Visio.VisSectionIndices.visSectionHyperlink,sCellName,(short)visTF.FALSE);

				Visio.Cell ovCell = ovShape.get_Cells(sName);
				if ( bForce == true )
					ovCell.FormulaForce = sFormula;
				else
					ovCell.Formula = sFormula;

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishControlsCellFormula(Visio.Shape ovShape, string sCellName, string sFormula, bool bForce)
		{
			if (ovShape == null )
				return null;

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionControls, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionControls);

    
			string sName = "Controls." + sCellName;

			try 
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.FALSE )
					ovShape.AddNamedRow((short)Visio.VisSectionIndices.visSectionControls,sCellName,(short)visTF.FALSE);

				Visio.Cell ovCell = ovShape.get_Cells(sName);
				if ( bForce == true )
					ovCell.FormulaForce = sFormula;
				else
					ovCell.Formula = sFormula;

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static Visio.Cell EstablishConnectionPointCellFormula(Visio.Shape ovShape, string sCellName, string sFormula, bool bForce)
		{
			if (ovShape == null )
				return null;

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionConnectionPts, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionConnectionPts);

    
			string sName = "Connections." + sCellName;

			try 
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.FALSE )
					ovShape.AddNamedRow((short)Visio.VisSectionIndices.visSectionConnectionPts,sCellName,(short)visTF.FALSE);

				Visio.Cell ovCell = ovShape.get_Cells(sName);
				if ( bForce == true )
					ovCell.FormulaForce = sFormula;
				else
					ovCell.Formula = sFormula;

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		public static bool RemoveSmartTagCell(Visio.Shape ovShape, string sCellName)
		{
			if (ovShape == null)
				return false;
    
			string sName = "SmartTags." + sCellName;
			if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) != (short)visTF.FALSE )
				return false;

			Visio.Cell ovCell = ovShape.get_Cells(sName);
			ovShape.DeleteRow((short)Visio.VisSectionIndices.visSectionSmartTag, (short)ovCell.Row);
			return true;
		}
		public static Visio.Cell EstablishSmartTagCellFormula(Visio.Shape ovShape, string sTagName, string sCellName, string sFormula, bool bForce)
		{
			if (ovShape == null )
				return null;

			if (ovShape.get_SectionExists((short)Visio.VisSectionIndices.visSectionSmartTag, (short)visTF.TRUE) == (short)visTF.FALSE)
				ovShape.AddSection((short)Visio.VisSectionIndices.visSectionSmartTag);

    
			string sName = "SmartTags." + sTagName + "." + sCellName;

			try 
			{
				if ( ovShape.get_CellExistsU(sName, (short)visTF.FALSE) == (short)visTF.FALSE )
					ovShape.AddNamedRow((short)Visio.VisSectionIndices.visSectionSmartTag,sTagName,(short)visTF.FALSE);

				Visio.Cell ovCell = ovShape.get_Cells(sName);
				if ( bForce == true )
					ovCell.FormulaForce = sFormula;
				else
					ovCell.Formula = sFormula;

				return ovCell;
			}
			catch(Exception e)
			{
				ApprenticeObject.ReportException(e);
				return null;
			}
		}
		#endregion
	}
}
