  public render(ctx: CanvasRenderingContext2D, deep: boolean = true) {
    if (this.isInvisible) return;
    ctx.save();

    //this.drawOrigin(ctx);
    this.updateContext(ctx);
    //this.drawOriginX(ctx);

    this.preDraw && this.preDraw(ctx);
    this.draw(ctx);
    this.drawHover && this.drawHover(ctx);
    this.postDraw && this.postDraw(ctx);

    this.isSelected && this.drawSelected(ctx);

    deep &&
      this._subcomponents.forEach(item => {
        item.render(ctx, deep);
      });
    ctx.restore();
  }



   public drawOutline(ctx: CanvasRenderingContext2D) {
    ctx.beginPath();
    ctx.setLineDash([15, 5]);
    ctx.rect(0, 0, this.width, this.height);
    ctx.stroke();
  }

  public drawSelected = (ctx: CanvasRenderingContext2D): void => {
    ctx.strokeStyle = 'red';
    ctx.lineWidth = 4;
    this.drawOutline(ctx);
    this.drawHandles(ctx);
    this.drawConnectionPoints(ctx);
    this.drawPin(ctx);
  }

  public drawBackground = (ctx: CanvasRenderingContext2D): void => {
    ctx.fillStyle = this.color;
    ctx.lineWidth = 1;
    ctx.globalAlpha = this.opacity;
    ctx.fillRect(0, 0, this.width, this.height);
  }

  public draw = (ctx: CanvasRenderingContext2D): void => {
    this.drawBackground(ctx);
  }
}