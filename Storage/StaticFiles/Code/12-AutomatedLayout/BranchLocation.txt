    
    public void ComputeNodeBranchLocation(Point pt, Point margin, List<BoxLayoutStyle>? styleList = null)
    {
        if (!_item.IsVisible) return;

        if ( styleList != null ) 
        {
            if (this.level >= styleList.Count) return;
            _layoutStyle = styleList[this.level];
        }

        //$"{style} for level {level}  BranchLocation".WriteLine(ConsoleColor.DarkBlue);
        //this is a top down process since we can place the _branchSize for eact node
        //it contains the child nodes inside 


        int halfWidth = 0;
        int halfHeight = 0;

        int stepX = 0;
        int stepY = 0;

        int leftEdgeX = 0;
        int topEdgeY = 0;

        var shape = GetShape();

        float delay = (float)((level + index / 10.0) / 2.0);
        if (_layoutStyle == BoxLayoutStyle.Horizontal)
        {
            //assume that for horizontal the Pt is center top
            topEdgeY = shape.Height + margin.Y;
            halfWidth = _branchSize.Width / 2;
            stepX = pt.X - halfWidth;
            _branchULPoint = new Point(stepX, pt.Y);
            // shape.AnimatedMoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape), 2.0F, delay);
            shape.MoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape));
        }
        else if (_layoutStyle == BoxLayoutStyle.Vertical)
        {
            //assume that for vertical the Pt is center left
            leftEdgeX = shape.Width + margin.X;
            halfHeight = _branchSize.Height / 2;
            stepY = pt.Y - halfHeight;
            _branchULPoint = new Point(pt.X, stepY);
            // shape.AnimatedMoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape), 2.0F, delay);
            shape.MoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape));
        }
        else if (_layoutStyle == BoxLayoutStyle.HorizontalStacked)
        {
            //assume that for horizontal the Pt is center top
            topEdgeY = shape.Height + margin.Y;
            leftEdgeX = 3 * shape.Height / 2;
            halfWidth = _branchSize.Width / 2;
            stepX = pt.X - halfWidth;
            stepY = pt.Y + margin.Y;
            _branchULPoint = new Point(stepX, pt.Y);
            // shape.AnimatedMoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape), 2.0F, delay);
            shape.MoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape));
        }
        else if (_layoutStyle == BoxLayoutStyle.VerticalStacked)
        {
            //assume that for horizontal the Pt is center top
            topEdgeY = 3 * shape.Width / 2;
            leftEdgeX = shape.Width + margin.X;
            halfHeight = _branchSize.Height / 2;
            stepX = pt.X + margin.X;
            stepY = pt.Y - halfHeight;
            _branchULPoint = new Point(pt.X, stepY);
            // shape.AnimatedMoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape), 2.0F, delay);
            shape.MoveTo(pt.X + shape.LocPinX(shape), pt.Y + shape.LocPinY(shape));
        }


        _children?.ForEach(child =>
        {
            //for horizontal compute the center of this child 
            //and add it to the full width of the children before us

            if (_layoutStyle == BoxLayoutStyle.Horizontal)
            {
                var halfchild = child._branchSize.Width / 2;
                stepX += halfchild;
                var childPt = new Point(stepX, pt.Y + topEdgeY);
                child.ComputeNodeBranchLocation(childPt, margin, styleList);
                stepX += halfchild;  //move to the other side
            }
            else if (_layoutStyle == BoxLayoutStyle.Vertical)
            {
                var halfchild = child._branchSize.Height / 2;
                stepY += halfchild;
                var childPt = new Point(pt.X + leftEdgeX, stepY);
                child.ComputeNodeBranchLocation(childPt, margin, styleList);
                stepY += halfchild;  //move to the other side
            }
            else if (_layoutStyle == BoxLayoutStyle.HorizontalStacked)
            {
                var halfchild = child._branchSize.Height / 2;
                stepY += halfchild;
                var childPt = new Point(pt.X + leftEdgeX, stepY);
                child.ComputeNodeBranchLocation(childPt, margin, styleList);
                stepY += halfchild;  //move to the other side
            }

        });

    }



    public FoLayoutTree<V>? AddChildNode(FoLayoutTree<V>? child)
    {

        if ( child != null)
        {
            this._children ??= new List<FoLayoutTree<V>>();
            this._children.Add(child);
            child._parent = this;
            child.level = level + 1;
            child.index = this._children.Count;
           //var shape = child.GetShape();
            //var tag = shape.Tag;
            // $"Adding Shape {tag} {shape.Name}".WriteLine(ConsoleColor.Green);
        } else 
        {
            $"Child is empty {child}".WriteLine(ConsoleColor.Green);
        }
        return child;
    }