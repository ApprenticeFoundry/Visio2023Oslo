   
// FoGlyph2D.cs
   
public interface IRender
{
    public Task Draw(Canvas2DContext ctx, int tick);
    public Task<bool> RenderDetailed(Canvas2DContext ctx, int tick, bool deep = true);
    public Task<bool> RenderConcise(Canvas2DContext ctx, double scale, Rectangle region);
}

// fields on a FoGlyph that point to render functions;

public Action<Canvas2DContext, FoGlyph2D>? PreDraw;
public Action<Canvas2DContext, FoGlyph2D>? HoverDraw;
public Action<Canvas2DContext, FoGlyph2D>? PostDraw;
public Action<Canvas2DContext, FoGlyph2D>? ShapeDraw;
public Action<Canvas2DContext, FoGlyph2D>? ShapeDrawSelected;

public virtual Matrix2D GetMatrix()
{
    if (_matrix == null)
    {
        _matrix = Matrix2D.NewMatrix();
        _matrix.AppendTransform(this.PinX, this.PinY, 1.0, 1.0, RotationZ(this), LocPinX(this), LocPinY(this));
    }
    return _matrix;
}

public virtual async Task UpdateContext(Canvas2DContext ctx, int tick)
{
    ContextLink?.Invoke(this, tick);

    var mtx = this.GetMatrix();

    // you must use Transform so the context can acumlate the positions
    if (mtx != null)  //this should NEVER be the case unless cleared by another process
        await ctx.TransformAsync(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);

    await ctx.SetFillStyleAsync(Color);
}


public virtual async Task Draw(Canvas2DContext ctx, int tick)
{
    await ctx.SaveAsync();
    ShapeDraw?.Invoke(ctx, this);
    await ctx.RestoreAsync();
}


public virtual async Task<bool> RenderDetailed(Canvas2DContext ctx, int tick, bool deep = true)
{
    if (CannotRender()) return false;

    await ctx.SaveAsync();
    await UpdateContext(ctx, tick);

    PreDraw?.Invoke(ctx, this);
    await Draw(ctx, tick);
    if (!IsSelected)
        HoverDraw?.Invoke(ctx, this);

    await DrawTag(ctx);

    PostDraw?.Invoke(ctx, this);

    if (IsSelected)
        await DrawWhenSelected(ctx, tick, deep);

    if (deep)
    {
        GetMembers<FoShape1D>()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));
        GetMembers<FoShape2D>()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));
    }

    if (GetMembers<FoGlue2D>()?.Count > 0)
        await DrawTriangle(ctx, "Black");


    await ctx.RestoreAsync();
    return true;
}

public async virtual Task DrawWhenSelected(Canvas2DContext ctx, int tick, bool deep)
{
    await ctx.SaveAsync();
    ShapeDrawSelected?.Invoke(ctx, this);
    GetHandles()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));
    GetConnectionPoints()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));
    //await DrawPin(ctx);
    await ctx.RestoreAsync();
}