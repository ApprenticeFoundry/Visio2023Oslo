   
// FoGlyph2D.cs
   
public interface IRender
{
    public Task Draw(Canvas2DContext ctx, int tick);
    public Task<bool> RenderDetailed(Canvas2DContext ctx, int tick, bool deep = true);
    public Task<bool> RenderConcise(Canvas2DContext ctx, double scale, Rectangle region);
}



public virtual async Task UpdateContext(Canvas2DContext ctx, int tick)
{
    ContextLink?.Invoke(this, tick);  // possable null function

    var mtx = this.GetMatrix();

    // you must use Transform so the context can acumlate the positions
    if (mtx != null)  
        await ctx.TransformAsync(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);

    await ctx.SetFillStyleAsync(Color);
}


public virtual async Task Draw(Canvas2DContext ctx, int tick)
{
    await ctx.SaveAsync();
    ShapeDraw?.Invoke(ctx, this);  // possable null function
    await ctx.RestoreAsync();
}


public virtual async Task<bool> RenderDetailed(Canvas2DContext ctx, int tick, bool deep = true)
{
    if (CannotRender()) return false;

    await ctx.SaveAsync();
    await UpdateContext(ctx, tick);  // necessary method

    PreDraw?.Invoke(ctx, this);   // possable null function

    await Draw(ctx, tick);  // necessary method
    if (!IsSelected)
        HoverDraw?.Invoke(ctx, this);   // possable null function

    await DrawTag(ctx);

    PostDraw?.Invoke(ctx, this);    // possable null function

    if (IsSelected)
        await DrawWhenSelected(ctx, tick, deep);  // necessary method

    if (deep)
    {
        GetMembers<FoShape1D>()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));
        GetMembers<FoShape2D>()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));
    }

    await ctx.RestoreAsync();
    return true;
}


public async virtual Task DrawWhenSelected(Canvas2DContext ctx, int tick, bool deep)
{
    await ctx.SaveAsync();

    ShapeDrawSelected?.Invoke(ctx, this);  // possable null function

    GetHandles()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));
    GetConnectionPoints()?.ForEach(async child => await child.RenderDetailed(ctx, tick, deep));

    await ctx.RestoreAsync();
}
