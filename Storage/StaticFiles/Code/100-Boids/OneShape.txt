
// FoFieldShape2D.cs

    private static async Task DrawABoid(Canvas2DContext ctx, Boid boid, int size)
    {
        var x = boid.X;
        var y = boid.Y;
        var a = boid.AngleXY * Matrix2D.DEG_TO_RAD;

        await ctx.SaveAsync();
        await ctx.TranslateAsync(x, y);
        await ctx.RotateAsync((float)a);
        await ctx.BeginPathAsync();
        await ctx.MoveToAsync(size, 0);
        await ctx.LineToAsync(0, 0);
        await ctx.LineToAsync(size / 2, size);
        await ctx.LineToAsync(size, 0);

        await ctx.ClosePathAsync();
        await ctx.FillAsync();
        await ctx.RestoreAsync();
    }

// FoFieldShape2D.cs

    public override async Task<bool> RenderDetailed(Canvas2DContext ctx, int tick, bool deep = true)
    {
        if ( !IsVisible ) return false;

        await ctx.SaveAsync();
        await UpdateContext(ctx, tick);


        DrawSimulation?.Invoke(ctx);
        if ( !IsSelected )
            HoverDraw?.Invoke(ctx, this);
            

        if (IsSelected)
            await DrawWhenSelected(ctx, tick, deep);

        await ctx.RestoreAsync();
        return true;
    }


// BoidsSimulation.cs

   public void CreateFieldShape()
    {

        //...

        FieldShape = new FoFieldShape2D("Boids", (int)Width, (int)Height, "Pink");
        Drawing.AddShape<FoFieldShape2D>(FieldShape);

        FieldShape.DrawSimulation = async (ctx) =>
        {
            foreach (var boid in LocalBoids)
                await DrawABoid(ctx, boid, 40);
        }

    }