
// Canvas2DComponent.razor.cs

    public partial class CanvasHelper : ComponentBase //, IAsyncDisposable
    {
  
        private DateTime _lastRender;

        // Event called every time a frame can be redrawn

        [Parameter]
        public EventCallback<double> RenderFrame { get; set; }


        [JSInvokable]
        public async ValueTask RenderInBlazor()
        {
            // calculate frames per second
            double fps = 1.0 / (DateTime.Now - _lastRender).TotalSeconds;

            _lastRender = DateTime.Now; // update for the next time 

            // raise the RenderFrame event to the blazor app
            await RenderFrame.InvokeAsync(fps);
        }



// Render the Drawing  and integrate some events in the workspace

        public async Task RenderFrame(double fps)
        {
            if (Ctx == null) return;
            tick++;

            Workspace?.PreRender(tick);

            var drawing = Workspace?.GetDrawing();
            if (drawing == null) return;

            //if you are already rendering then skip it this cycle
            if (drawing.SetCurrentlyRendering(true)) return;
            
            await Ctx.BeginBatchAsync();
            await Ctx.SaveAsync();

            await drawing.RenderDrawing(Ctx, tick, fps);
            Workspace?.RenderWatermark(Ctx, tick);

            await Ctx.RestoreAsync();
            await Ctx.EndBatchAsync();
            drawing.SetCurrentlyRendering(false);

            Workspace?.PostRender(tick);
        }
    }